Create a dApp to allow donors to donate ETH to beneficiaries. 

1) Users need to create a new fundraising campaign.
function createCampaignName (address _campaignOwner, string _campaignOwnerPhoneNumber, string _purpose, uint _goalAmount, string _fundraisingCategory) returns (bool){
	/* initialize campaign balance to 0 */
	/* initialize array of donor addresses to 0 */
	/* set status to pending for approval */
	/* validate phone number */
};

2) Donors are able to donate ETH in a specific approved _campaignName.
function donate(address _donor, string _campaignName, uint _amount) public payable returns (uint) {
	/* make sure donor's balance >= giving amount */
	/* validate correct _campaignName */
	/* transfer giving _amount from donor to _campaignName */
	/* update donor's balance */
	/* log this transaction */
	/* return balance of the _campaignName */
};


3)	Administrators can approve or reject a submitted fundraising campaign
function approveCampaign (address _campaignOwner) {
	/* update _campaignName status to Approved */
}

function rejectCampaign (address _campaignOwner) {
	/* update _campaignName status to Rejected */
}


4)	CampaignOnwer can purchase goods from stores
function purchaseGoods(uint sku) payable public {
  	/* transfer money to the seller */
  	/* set the buyer as the person who called this transaction */
  	/* set the state to Sold */
  }

5)	Donors are able to view all transactions for a given _campaignName and view the current balance
function listTransactions (string _campaignName) view public {

}

function getTotalDonations(string _campaignName) view public returns(uint) {
    return totalDonations;
}

